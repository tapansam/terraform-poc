---
- name: Configure web server for .NET core application
  hosts: adv
  become: true
  vars:
    adv_domain: yourdomain.com
    email: email@adventureworks.com
    webroot_path: "/var/www/advapp"
    certbot_executable_path: "/usr/bin/certbot"
    artifact_path: "../../../../artifacts/"
    package_name: "adv_package"
    app_user: "www-data"
    adv_app_runtime: "Adv.Web.dll"
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Install .NET runtime
      ansible.builtin.apt:
        name:
          - dotnet-runtime-8.0
          - aspnetcore-runtime-8.0
        state: present

    - name: Install ASP.NET Core runtime
      ansible.builtin.apt:
        name: aspnetcore-runtime-8.0
        state: present

    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Install Certbot and itâ€™s Nginx plugin
      ansible.builtin.apt:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Create application user
      ansible.builtin.user:
        name: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: Ensures app directory exists on server
      ansible.builtin.file:
        path: "{{ webroot_path }}"
        state: directory
        recurse: true

    - name: Archive the application binaries
      community.general.archive:
        path: "{{ artifact_path }}"
        dest: "{{ package_name }}.gz"
      delegate_to: localhost
      become: false

    - name: Move the archive to server
      ansible.builtin.copy:
        src: "{{ package_name }}.gz"
        dest: "{{ webroot_path }}/.."
        force: true

    - name: Unarchive on server
      ansible.builtin.unarchive:
        src: "{{ webroot_path }}/../{{ package_name }}.gz"
        dest: "{{ webroot_path }}"
        remote_src: true
        owner: "{{ app_user }}"
        group: "{{ app_user }}"        
        mode: 0644

    - name: Delete archive on server
      ansible.builtin.file:
        path: "{{ webroot_path }}/../{{ package_name }}.gz"
        state: absent

    - name: Delete archive locally
      ansible.builtin.file:
        path: "{{ package_name }}.gz"
        state: absent
      delegate_to: localhost
      become: false
    # - name: Copy application binaries
    #   ansible.builtin.copy:
    #     src: "{{ artifact_path }}"
    #     dest: /var/www/advapp
    #     owner: www-data
    #     group: www-data
    #     mode: 0644
    - name: Create symbolic link 
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/default"
        dest: "/etc/nginx/sites-enabled/default"
        state: link

    - ansible.builtin.template:
        src: nginx-server.j2
        dest: "/etc/nginx/sites-available/default"

    - name: Retart nginx to reload server configuration
      ansible.builtin.command: nginx -s reload

    - name: Copy systemd service file
      ansible.builtin.template:
        src: kestrel-advapp.service.j2
        dest: /etc/systemd/system/kestrel-advapp.service

    - name: Start systemtl service
      ansible.builtin.systemd:
        state: started
        name: kestrel-advapp

    - name: Generate the SSL certificate
      ansible.builtin.command: "{{ certbot_executable_path }} --nginx -d {{ adv_domain }} --non-interactive --agree-tos --email {{ email }}"

    - name: Set up automatic renewal
      ansible.builtin.cron:
        name: "Certbot automatic renewal"
        job: "{{ certbot_executable_path }} renew --quiet"
        minute: "11"
        hour: "11"
