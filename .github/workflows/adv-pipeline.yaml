name: Adventure works DevOps automation
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  SOLUTION_NAME: src/advapp/advapp.sln
  AZURE_WEBAPP_PACKAGE_PATH: artifacts
  AZURE_WEBAPP_RUNTIME: "DOTNETCORE:8.0"
jobs:
  tf_analysis:
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: src/deployment/terraform/adv-deployment
    name: Analyse the Terraform
    environment: dev
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          tfsec_args: --soft-fail
          github_token: ${{ github.token }}

      - name: Terraform Plan
        id: plan
        env:
          DNS_ZONE: ${{secrets.DNS_ZONE}}
          DNS_ZONE_RG_NAME: ${{secrets.DNS_ZONE_RG_NAME}}
        run: |
          terraform plan -no-color -input=false \
          -var "subscription_id=${{secrets.AZURE_SUBSCRIPTION_ID}}" \
          -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}" \
          -var "github_token=${{secrets.PAT_TOKEN_GIT_INTEGRATION}}" \
          -var "dns_zone={\"name\":\"$DNS_ZONE\",\"rg\":\"$DNS_ZONE_RG_NAME\"}" \
          -var "env=dev"

        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  build_and_test:
    if: github.event_name=='pull_request'
    needs: tf_analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-8.0
          ls
      - name: Restore dependencies
        run: dotnet restore */**/*.sln
      - name: Build
        run: dotnet build */**/*.sln --configuration Release --no-restore /p:DebugType=None /p:DebugSymbols=false
      - name: Test
        run: dotnet test src/advapp/Adv.Tests/Adv.Tests.csproj -c Release --no-restore --no-build --verbosity normal --logger:"trx;LogFilePrefix=testResults"

  build_and_publish:
    if: github.event_name != 'pull_request' && contains(toJson(github.event.commits), 'Initial commit') == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-8.0
          ls
      - name: Restore dependencies
        run: dotnet restore */**/*.sln
      - name: Build
        run: dotnet build */**/*.sln --configuration Release --no-restore /p:DebugType=None /p:DebugSymbols=false
      - name: Publish
        run: dotnet publish src/advapp/Adv.Web/Adv.Web.csproj -c Release -o ./artifacts --no-build /p:DebugType=None /p:DebugSymbols=false
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts
  deploy-to-dev:
    if: github.event_name != 'pull_request' && contains(toJson(github.event.commits), 'Initial commit') == false
    needs: build_and_publish
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true # This environment variable tells the backend to use AzureAD auth rather than trying a create a key. It means we can limit the permissions applied to the storage account and container to least priviledge: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm#use_azuread_auth

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        working-directory: src/deployment/terraform/adv-deployment
        run: |
          terraform init \
          -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"

      - name: Terraform Apply
        working-directory: src/deployment/terraform/adv-deployment
        env:
          DNS_ZONE: ${{secrets.DNS_ZONE}}
          DNS_ZONE_RG_NAME: ${{secrets.DNS_ZONE_RG_NAME}}
        run: |
          terraform apply -auto-approve \
          -var "subscription_id=${{secrets.AZURE_SUBSCRIPTION_ID}}" \
          -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}" \
          -var "github_token=${{secrets.PAT_TOKEN_GIT_INTEGRATION}}" \
          -var "dns_zone={\"name\":\"$DNS_ZONE\",\"rg\":\"$DNS_ZONE_RG_NAME\"}" \
          -var "env=dev"
      
      # - name: Check artifact folder
      #   run: ls ${{ github.workspace }}

      - name: Run playbook to configure webserver
        uses: dawidd6/action-ansible-playbook@v2
        env:
          LETSENCRYPT_EMAIL: ${{secrets.LETSENCRYPT_EMAIL}}
          ADV_DOMAIN: ${{secrets.DNS_ZONE}}
        with:
          # Required, playbook filepath
          playbook: webserver.yml
          # Optional, directory where playbooks live
          directory: ./src/deployment/ansible/playbooks
          # Optional, ansible configuration file content (ansible.cfg)
          # configuration: |
          #   [defaults]
          #   callbacks_enabled = ansible.posix.profile_tasks, ansible.posix.timer
          #   stdout_callback = yaml
          #   nocows = false
          # Optional, SSH private key
          # key: ${{secrets.SSH_PRIVATE_KEY}}
          # Optional, literal inventory file contents
          # inventory: |
          #   [all]
          #   example.com

          #   [group1]
          #   example.com
          # Optional, SSH known hosts file content
          # known_hosts: |
          #   example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
          # Optional, encrypted vault password
          # vault_password: ${{secrets.VAULT_PASSWORD}}
          # Optional, galaxy requirements filepath
          # requirements: galaxy-requirements.yml
          # Optional, additional flags to pass to ansible-playbook
          options: |
            --inventory adv.hosts
            --extra-vars adv_domain=dev.${{secrets.DNS_ZONE}}
            --extra-vars email=${{secrets.LETSENCRYPT_EMAIL}}
            --extra-vars "artifact_path=${{ github.workspace }}/artifacts/"
            --verbose
